{"version":3,"sources":["enum/form.enum.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EImageFormUploadType","App","useState","storyType","setStoryType","data","setData","reset","localStorage","setItem","onSubmit","uploadMediaFunction","file","a","URL","createObjectURL","storyView","type","height","width","className","onClick","json","getItem","objects","JSON","parse","Fragment","onCancel","uploadType","File","uploadFunction","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAAYA,E,wFAAAA,K,YAAAA,E,aAAAA,M,uBCkEGC,EA3DH,WAAoB,IAAD,EACKC,mBAAwB,MAD7B,mBACtBC,EADsB,KACXC,EADW,OAELF,mBAAc,MAFT,mBAEtBG,EAFsB,KAEhBC,EAFgB,KAYvBC,EAAQ,WACZH,EAAa,MACbE,EAAQ,MACRE,aAAaC,QAAQ,OAAQ,KAGzBC,EAAW,SAACL,GAChBG,aAAaC,QAAQ,OAAQJ,IAGzBM,EAAmB,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EACnBC,IAAIC,gBAAgBH,IADD,2CAAH,sDAInBI,EACJX,KACGA,EAAKY,MAAQ,cAAC,mBAAD,CAAkBZ,KAAMA,EAAMa,OAAQ,IAAKC,MAAO,OAChD,UAAX,OAAJd,QAAI,IAAJA,OAAA,EAAAA,EAAMY,OAAmB,cAAC,kBAAD,CAAiBZ,KAAMA,KAErD,OACE,sBAAKe,UAAU,OAAf,UACE,wBAAQC,QA7BiB,WAC3B,IAAMC,EAAOd,aAAae,QAAQ,QAClC,GAAID,EAAM,CACR,IAAME,EAAUC,KAAKC,MAAMJ,GAC3BhB,EAAQkB,KAyBR,qCACA,wBAAQH,QAASd,EAAjB,oBACEJ,GACA,eAAC,IAAMwB,SAAP,WACE,wBAAQN,QAAS,kBAAMjB,EAAa,SAApC,wBACA,wBAAQiB,QAAS,kBAAMjB,EAAa,UAApC,8BAGJ,sBAAKgB,UAAU,OAAf,UACkB,SAAdjB,GAAwB,cAAC,gBAAD,CAAeyB,SAAUrB,EAAOG,SAAUA,KACnD,UAAdP,GACC,cAAC,iBAAD,CACEyB,SAAUrB,EACVG,SAAUA,EACVmB,WAAY7B,EAAqB8B,KACjCC,eAAgBpB,EAChBQ,MAAO,IACPD,OAAQ,MAGd,qBAAKc,MAAO,CAAEb,MAAO,QAASD,OAAQ,SAAtC,SAAkDF,WC9C3CiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f8885811.chunk.js","sourcesContent":["export enum EImageFormUploadType {\n  Link = 'link',\n  File = 'file',\n}\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport { EImageFormUploadType } from './enum/form.enum';\n\nimport { ImageStoryForm, TextStoryForm, TextStoryViewer, ImageStoryViewer } from 'facebook-story';\n\nconst App = (): JSX.Element => {\n  const [storyType, setStoryType] = useState<string | null>(null);\n  const [data, setData] = useState<any>(null);\n\n  const showResultFromServer = () => {\n    const json = localStorage.getItem('data');\n    if (json) {\n      const objects = JSON.parse(json);\n      setData(objects);\n    }\n  };\n\n  const reset = () => {\n    setStoryType(null);\n    setData(null);\n    localStorage.setItem('data', '');\n  };\n\n  const onSubmit = (data: string) => {\n    localStorage.setItem('data', data);\n  };\n\n  const uploadMediaFunction = async (file: File): Promise<string> => {\n    return URL.createObjectURL(file);\n  };\n\n  const storyView =\n    data &&\n    ((!data.type && <ImageStoryViewer data={data} height={300} width={300} />) ||\n      (data?.type === 'text' && <TextStoryViewer data={data} />));\n\n  return (\n    <div className='root'>\n      <button onClick={showResultFromServer}>Show result from server</button>\n      <button onClick={reset}>Reset</button>\n      {!storyType && (\n        <React.Fragment>\n          <button onClick={() => setStoryType('text')}>Text story</button>\n          <button onClick={() => setStoryType('image')}> Image story </button>\n        </React.Fragment>\n      )}\n      <div className='main'>\n        {(storyType === 'text' && <TextStoryForm onCancel={reset} onSubmit={onSubmit} />) ||\n          (storyType === 'image' && (\n            <ImageStoryForm\n              onCancel={reset}\n              onSubmit={onSubmit}\n              uploadType={EImageFormUploadType.File}\n              uploadFunction={uploadMediaFunction}\n              width={300}\n              height={300}\n            />\n          ))}\n        <div style={{ width: '300px', height: '300px' }}>{storyView}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}